(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=o.a.createContext({}),l=function(e){var t=o.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,m=p["".concat(i,".").concat(u)]||p[u]||b[u]||r;return n?o.a.createElement(m,s(s({ref:t},d),{},{components:n})):o.a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},84:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(2),o=n(6),r=(n(0),n(107)),i={title:"Starting a Test Network",id:"starting-a-test-network"},s={unversionedId:"advanced/starting-a-test-network",id:"advanced/starting-a-test-network",isDocsHomePage:!1,title:"Starting a Test Network",description:"A test network can be used to test your applications in an isolated environment before you deploy to Swarm mainnet. It can be started by overriding the default configuration values of your Swarm node. Throughout this tutorial, we will make use of configuration files to configure the nodes but of course you can aslo do the same using flags or environment variables (see Start your node).",source:"@site/docs/advanced/starting-a-test-network.md",permalink:"/docs/advanced/starting-a-test-network",editUrl:"https://github.com/ethersphere/docs.github.io/docs/advanced/starting-a-test-network.md",sidebar:"someSidebar",previous:{title:"SWAP Bandwidth Accounting",permalink:"/docs/advanced/swap"},next:{title:"API and Debug API",permalink:"/docs/api-reference/api-reference"}},c=[{value:"Start a network on your own computer",id:"start-a-network-on-your-own-computer",children:[{value:"Configuration",id:"configuration",children:[]},{value:"Starting Your Nodes",id:"starting-your-nodes",children:[]},{value:"Making a network",id:"making-a-network",children:[]}]}],d={rightToc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A test network can be used to test your applications in an isolated environment before you deploy to Swarm mainnet. It can be started by overriding the default configuration values of your Swarm node. Throughout this tutorial, we will make use of configuration files to configure the nodes but of course you can aslo do the same using flags or environment variables (see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/getting-started/start-your-node"}),"Start your node"),"). "),Object(r.b)("h2",{id:"start-a-network-on-your-own-computer"},"Start a network on your own computer"),Object(r.b)("h3",{id:"configuration"},"Configuration"),Object(r.b)("p",null,"Starting a network is easiest achieved by making use of configuration files. We need at least two nodes to start a network. Hence, below two configuration files are provided. Save them respectively as ",Object(r.b)("inlineCode",{parentName:"p"},"config_1.yaml")," and ",Object(r.b)("inlineCode",{parentName:"p"},"config_2.yaml"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"config_1.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'network-id: 7357\napi-addr: :8080\np2p-addr: :7070\ndebug-api-addr: 127.0.0.1:6060\ndebug-api-enable: true\nbootnode: ""\ndata-dir: /tmp/bee/node1\npassword: some pass phze\nswap-enable: false\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"config_2.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'network-id: 7357\napi-addr: :8081\np2p-addr: :7071\ndebug-api-addr: 127.0.0.1:6061\ndebug-api-enable: true\ndata-dir: /tmp/bee/node2\nbootnode: ""\npassword: some pass phze\nwelcome-message: "Bzz Bzz Bzz"\nswap-enable: false\n')),Object(r.b)("p",null,"Note that for each node, we provide a different ",Object(r.b)("inlineCode",{parentName:"p"},"api-addr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"debug-api-addr"),". If we had not specified different addresses here, we would get an ",Object(r.b)("inlineCode",{parentName:"p"},"address already in use")," error, as no two applications can listen to the same port. We also specify a different ",Object(r.b)("inlineCode",{parentName:"p"},"p2p-addr"),". If we had not, our nodes would not be able to communicate with each other. We also specify a separate ",Object(r.b)("inlineCode",{parentName:"p"},"data-dir")," for each node, as each node must have a it's own separate key and chunk data store."),Object(r.b)("p",null,"We also provide a network-id, so that our network remains separate from the Swarm mainnet, which has network-id 1. Nodes will not connect to peers which have a different network id. We also set our bootnode to be the empty string ",Object(r.b)("inlineCode",{parentName:"p"},'""'),". A bootnode is responsible for bootstrapping the network so that a new node can find it's first few peers before it begins it's own journey to find friends in the Swarm. In Swarm any node can be used as a bootnode. Later, we will manually join our nodes together so in this case a bootnode isn't required."),Object(r.b)("p",null,"Finally, note the ",Object(r.b)("inlineCode",{parentName:"p"},"welcome-message")," in the first nodes configuration file. This is a friendly feature allowing you to send a message to peers that connect to you!"),Object(r.b)("h3",{id:"starting-your-nodes"},"Starting Your Nodes"),Object(r.b)("p",null,"Now we have created our configuration files, let's start our nodes by running ",Object(r.b)("inlineCode",{parentName:"p"},"bee start --config config_1.yaml"),", then in another Terminal session, run ",Object(r.b)("inlineCode",{parentName:"p"},"bee start --config-file config_2.yaml"),"."),Object(r.b)("p",null,"We can now inspect the state of our network by sending HTTP requests to the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api-reference/api-reference"}),"Debug API"),".."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl -s http://localhost:6060/topology | jq .connected\n> 0\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl -s http://localhost:6061/topology | jq .connected\n> 0\n")),Object(r.b)("p",null,"No connections yet? Right! Let's remedy that!"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Here we are using the ",Object(r.b)("inlineCode",{parentName:"p"},"jq")," command line utility to count the amount of objects in the ",Object(r.b)("inlineCode",{parentName:"p"},"peers")," array in the JSON response we have received from our Debug API, learn more about how to install and use ",Object(r.b)("inlineCode",{parentName:"p"},"jq")," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://stedolan.github.io/jq/"}),"here"),"."))),Object(r.b)("h3",{id:"making-a-network"},"Making a network"),Object(r.b)("p",null,"In order to create a network from our two isolated nodes, we must first instruct our nodes to connect to each other. This step is not explicitly needed if you connect to the main Swarm network, as the default bootnodes in the Swarm network will automatically suggest peers. "),Object(r.b)("p",null,"First, we will need to find out the network address of the first node. To do this, we send a HTTP request to the ",Object(r.b)("inlineCode",{parentName:"p"},"addresses")," endpoint of the Debug API. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl localhost:6060/addresses | jq\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "overlay": "f57a65207f5766084d3ebb6bea5e2e4a712504e54d86a00961136b514f07cdac",\n  "underlay": [\n    "/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs",\n    "/ip4/192.168.0.10/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs",\n    "/ip6/::1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs",\n    "/ip4/xx.xx.xx.xx/tcp/40317/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs"\n  ]\n}\n')),Object(r.b)("p",null,"Here, we get firstly the ",Object(r.b)("strong",{parentName:"p"},"overlay address")," - this is the permanent address Swarm uses as your anonymous identity in the network and secondly, a list of all the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.libp2p.io/reference/glossary/#multiaddr"}),"multiaddresses"),", which are physical network addresses at which you node can be found by peers. "),Object(r.b)("p",null,"Note the addresses starting with an ",Object(r.b)("inlineCode",{parentName:"p"},"/ip4"),", followed by ",Object(r.b)("inlineCode",{parentName:"p"},"127.0.0.1"),", which is the ",Object(r.b)("inlineCode",{parentName:"p"},"localhost")," internal network in your computer. Now we can use this full address to be the bootnode of our second node so that when it starts up, it goes to this address and both nodes become peers of each other. Let's add this into our config_2.yaml file. "),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"config_2.yaml")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'network-id: 7357\napi-addr: :8081\np2p-addr: :7071\ndebug-api-addr: 127.0.0.1:6061\ndebug-api-enable: true\ndata-dir: /tmp/bee/node2\nbootnode: "/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs"\npassword: some pass phze\nwelcome-message: "Bzz Bzz Bzz"\nswap-enable: false\n')),Object(r.b)("p",null,"Now, we can shut our second node and reboot with the new configuration."),Object(r.b)("p",null,"Look at the the output for your first node, you should see our connection message!"),Object(r.b)("p",null,"Let's also verify that we can see both nodes in using each other's Debug API's."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl -s http://localhost:6060/peers | jq\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"curl -s http://localhost:6060/peers | jq\n")),Object(r.b)("p",null,"Congratulations! You have made your own tiny two bee Swarm! \ud83d\udc1d \ud83d\udc1d"))}l.isMDXComponent=!0}}]);