[{"title":"Welcome!","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Installation","type":1,"pageTitle":"Welcome!","url":"docs/#installation","content":"Don't have Bee installed yet? It's easy! Head over to the installation section to get Bee up and running on your computer. "},{"title":"Usage","type":1,"pageTitle":"Welcome!","url":"docs/#usage","content":"To learn more about how to get the most out of Bee, head over to the tutorials section to find out how to share files with your friends, use Bee to host a website on a public Swarm Gateway, and much more... "},{"title":"Dapps","type":1,"pageTitle":"Welcome!","url":"docs/#dapps","content":"Swarm is all about Dapps. We provide the most developer friendly environment to build Dapps on. Built on principles of functionality, flexibility and accessibility, Bee provides high level constructs for file storage, feeds and key-value stores, while also providing the low level access to other applications and libraries that create Single Owner and Trojan chunks clientside, with total e2e privacy. "},{"title":"Incentives","type":1,"pageTitle":"Welcome!","url":"docs/#incentives","content":"Need even more incentive to get involved with the wonderful world of Swarm? Find out how you'll soon be earning BZZ tokens for storing and distributing your share of the worlds data, sharing is caring! "},{"title":"Find Out More","type":1,"pageTitle":"Welcome!","url":"docs/#find-out-more","content":"What happens with your Bee node when you start it up? Want to know more about the amazing Swarm technology behind Bee? Want to make your own client? Read The Book of Swarm, our 250 page epic guide to the future tech underpinning the Swarm network. "},{"title":"Development","type":1,"pageTitle":"Welcome!","url":"docs/#development","content":"We'd love you to join us! Are you up to the challenge of helping us to create Bee and the other incredible technologies we're building on top of it? You are invited to contribute code to the Bee Client or any of the other projects in Swarm's Ethersphere. "},{"title":"Community","type":1,"pageTitle":"Welcome!","url":"docs/#community","content":"There is a vibrant and buzzing community behind Swarm, get involved in one of our group channels. Swarm.Beehive Chat on Mattermost.Orange Lounge.Twitter @ethswarm.reddit channel. "},{"title":"Reporting a bug","type":1,"pageTitle":"Welcome!","url":"docs/#reporting-a-bug","content":"If your Bee isn't working, get in touch and let us know! Every Bee is important to us and we'll get right to work on fixing it for you as soon as possible. üêù Thanks for being here, we wish you Love and Bees from the Swarm Team x "},{"title":"Persistence","type":0,"sectionRef":"#","url":"docs/advanced/persistence","content":"","keywords":""},{"title":"Persistence on your own node by local pinning","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#persistence-on-your-own-node-by-local-pinning","content":"It is possible to instruct your node never to delete certain chunks, by locally pinning the chunks. Locally pinning chunks means that you will always be able to access these chunks via your node. However, it doesn't does mean that those chunks always be available in the network. Locally pinning a chunk is best done upon upload by passing the swarm-pin header to the upload you are doing. As an example, you can upload a file and pin it at the same time by using Copy curl -H \"Content-Type: image/x-jpeg\" -H \"swarm-pin: true\" --data-binary @kitten.jpg localhost:8080/files?name=cat.jpg "},{"title":"Persistence in the network by global pinning","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#persistence-in-the-network-by-global-pinning","content":"Global pinning adds a mechanism such that chunks which are locally pinned become globally available to the network. "},{"title":"Become a global pinner","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#become-a-global-pinner","content":"To become a global pinner, you must: start your node in global-pinning mode;make sure that you persist the files. advertise that you are a global pinner; Start your node in global pinning mode# Starting a node in global pinning mode is done with our standard configuration options (see start). The flag which you pass to the command line is --global-pinning-enable. This mode makes your node to listen to PSS (Postal Service over Swarm) messages, containing requests for repair. If your node receives a request for repair and you store the chunk for which repair is requested, your node will re-upload this chunk to its natural location in the network. Persist the files# Persisting the files is advertised to be done in the local pinning feature. However, this is not obligatory; As long as you make sure that you persist the files and have them available at the moment that the recovery mechanism is set in motion (after receiving a PSS message) all is fine. Advertise as a global pinner# By only starting your node in global pinning mode, nodes will still not know that they need to reach out to you for repair. You must somehow report that you are globally pinning the files (and this information must be picked up by any person who downloads the content you are globally pinning). The Swarm team envisions multiple ways how this is possible: via smart-contracts, via special gateways to the Swarm network, via Manifests, as data in the root chunk, via a feed or many other ways. We deliberately didn't force a specific pattern to the user, and we also don't aim to do so in the future. However, when a certain pattern to advertise yourself as a global pinner becomes the de-facto standard, we will report it here. info As a global pinner, you don't need to advertise your full overlay address. You only need to advertise your overlay addres as a target which is the first n characters of your overlay address, where n increases if the number of nodes in the network increases. (see \"what is a target\"). "},{"title":"Request files which are globally pinned","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#request-files-which-are-globally-pinned","content":"To make use of the global pinning feature (and request a repair if a chunk not found), you need to pass a targets query parameter to your download request. The value of this parameter is a reference to the address of the global pinner node. You don't need to pass his whole address, just the first n characters is sufficient (where n increases if the number of nodes in the network increases). Please see \"What is a target\" below. An example of a request to download a file with the targets query parameter passed in: Copy curl http://localhost:8080/files/3b2791985f102fe645d1ebd7f51e522d277098fcd86526674755f762084b94ee?targets=<target comes here> If your chunk is not found in the network, but you sent a request to the passed-in target for repair then you get a 202 response back, indicating that the request has been accepted for processing. After few seconds, You can retry to download the chunk again and this time the network will respond back with the repaired chunk. If you still don't get the chunk back, try downloading the chunk with another target. How to find out which targets to pass# Just as there is no set way how to advertise that your node is a global pinner, there is no set way on how to figure out which nodes are global pinners for which content. The burden to pass targets in a request should ultimately not be borne by the user; we envision that the code that interacts with the bee client handles finding the target and passing it in with the request. "},{"title":"What is a target","type":1,"pageTitle":"Persistence","url":"docs/advanced/persistence#what-is-a-target","content":"A target is defined as the first n-characters of an overlay address. In order for PSS to guarantee delivery to the destination, the bit-length of the target must be longer than the neighborhood depth of the node. As the neighborhood depth is defined as log2(N/R), where N is the amount of nodes in the network and R is the neighborhood size or redundancy factor. info For a few hundred of nodes in the network, we advice the length of the target to be 2 bytes. From about 50000 nodes onwards, you should start considering a target length of 3 bytes. To understand this a deeper, you should realize that a recipient node is only guaranteed to receive a message if the chunk, containing the message falls into the neighborhood of the recipient. Falling into the recipients's neighbourhood means the recipient's overlay address matches the chunk's address on a prefix with bit-length greater or equal to the neighbourhood depth of the recipient. The neighbourhood depth is logarithmic in the network size. Its expected value is log2(N/R) where R is the neighbourhood size or redundancy factor. Now if the network has a thousand nodes (N=2^10) and a redundancy factor of 4 (R=4=2^2), the expected depth is 8. However, due to variance some nodes will have depth of 9, which means that a trojan generated with a one-byte target (guaranteed 8 bits matching) will only have 50% chance of hitting the node's neighbourhood. The conclusion is that already at a good few hundred nodes, one needs 2-byte targets. "},{"title":"Starting a Test Network","type":0,"sectionRef":"#","url":"docs/advanced/starting-a-test-network","content":"","keywords":""},{"title":"Start a network on your own computer","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#start-a-network-on-your-own-computer","content":""},{"title":"Configuration","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#configuration","content":"Starting a network is easiest achieved by making use of configuration files. We need at least two nodes to start a network. Hence, below two configuration files are provided. Save them respectively as config_1.yaml and config_2.yaml. config_1.yaml Copy network-id: 7357 api-addr: :8080 p2p-addr: :7070 debug-api-addr: 127.0.0.1:6060 debug-api-enable: true bootnode: \"\" data-dir: /tmp/bee/node1 password: some pass phze swap-enable: false config_2.yaml Copy network-id: 7357 api-addr: :8081 p2p-addr: :7071 debug-api-addr: 127.0.0.1:6061 debug-api-enable: true data-dir: /tmp/bee/node2 bootnode: \"\" password: some pass phze welcome-message: \"Bzz Bzz Bzz\" swap-enable: false Note that for each node, we provide a different api-addr, debug-api-addr. If we had not specified different addresses here, we would get an address already in use error, as no two applications can listen to the same port. We also specify a different p2p-addr. If we had not, our nodes would not be able to communicate with each other. We also specify a separate data-dir for each node, as each node must have a it's own separate key and chunk data store. We also provide a network-id, so that our network remains separate from the Swarm mainnet, which has network-id 1. Nodes will not connect to peers which have a different network id. We also set our bootnode to be the empty string \"\". A bootnode is responsible for bootstrapping the network so that a new node can find it's first few peers before it begins it's own journey to find friends in the Swarm. In Swarm any node can be used as a bootnode. Later, we will manually join our nodes together so in this case a bootnode isn't required. Finally, note the welcome-message in the first nodes configuration file. This is a friendly feature allowing you to send a message to peers that connect to you! "},{"title":"Starting Your Nodes","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#starting-your-nodes","content":"Now we have created our configuration files, let's start our nodes by running bee start --config config_1.yaml, then in another Terminal session, run bee start --config-file config_2.yaml. We can now inspect the state of our network by sending HTTP requests to the Debug API.. Copy curl -s http://localhost:6060/topology | jq .connected > 0 Copy curl -s http://localhost:6061/topology | jq .connected > 0 No connections yet? Right! Let's remedy that! info Here we are using the jq command line utility to count the amount of objects in the peers array in the JSON response we have received from our Debug API, learn more about how to install and use jq here. "},{"title":"Making a network","type":1,"pageTitle":"Starting a Test Network","url":"docs/advanced/starting-a-test-network#making-a-network","content":"In order to create a network from our two isolated nodes, we must first instruct our nodes to connect to each other. This step is not explicitly needed if you connect to the main Swarm network, as the default bootnodes in the Swarm network will automatically suggest peers. First, we will need to find out the network address of the first node. To do this, we send a HTTP request to the addresses endpoint of the Debug API. Copy curl localhost:6060/addresses | jq Copy { \"overlay\": \"f57a65207f5766084d3ebb6bea5e2e4a712504e54d86a00961136b514f07cdac\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip4/192.168.0.10/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip6/::1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\", \"/ip4/xx.xx.xx.xx/tcp/40317/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\" ] } Here, we get firstly the overlay address - this is the permanent address Swarm uses as your anonymous identity in the network and secondly, a list of all the multiaddresses, which are physical network addresses at which you node can be found by peers. Note the addresses starting with an /ip4, followed by 127.0.0.1, which is the localhost internal network in your computer. Now we can use this full address to be the bootnode of our second node so that when it starts up, it goes to this address and both nodes become peers of each other. Let's add this into our config_2.yaml file. config_2.yaml Copy network-id: 7357 api-addr: :8081 p2p-addr: :7071 debug-api-addr: 127.0.0.1:6061 debug-api-enable: true data-dir: /tmp/bee/node2 bootnode: \"/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAmUdCRWmyQCEahHthy7G4VsbBQ6dY9Hnk79337NfadKJEs\" password: some pass phze welcome-message: \"Bzz Bzz Bzz\" swap-enable: false Now, we can shut our second node and reboot with the new configuration. Look at the the output for your first node, you should see our connection message! Let's also verify that we can see both nodes in using each other's Debug API's. Copy curl -s http://localhost:6060/peers | jq Copy curl -s http://localhost:6060/peers | jq Congratulations! You have made your own tiny two bee Swarm! üêù üêù "},{"title":"PSS Messaging","type":0,"sectionRef":"#","url":"docs/advanced/pss","content":"","keywords":""},{"title":"Subscribe and Receive Messages","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#subscribe-and-receive-messages","content":"Once your Bee node is up and running, you will be able to subscribe to feeds using websockets. For testing, it is useful to use the websocat command line utility. Here we subscribe to the topic test-topic Copy websocat ws://localhost:8080/pss/subscribe/test-topic Our node is now watching for new messages received in it's nearest neighbourhood. "},{"title":"Send Messages","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#send-messages","content":"Messages can be sent simply by sending a POST request to the PSS api endpoint. When sending messages, we must specify a 'target' prefix of the recipients swarm address, a partial address representing their neighbourhood. Currently the length of this prefix is recommended to be two bytes, which will work well until the network has grown to a size of ca. 20-50K nodes. We must also provide the public key, so that Bee can encrypt the message in such a way that it may only be read by the intended recipient. For example, if we want to send a PSS message with topic test-topic to a node with address... 7bc50a5d79cb69fa5a0df519c6cc7b420034faaa61c175b88fc4c683f7c79d96 ...and public key... 0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd ...we must include the target 7bc5 and the public key itself as a query argument. Copy curl -XPOST \\ localhost:8082/pss/send/test/7bc5?recipient=0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd \\ --data \"Hello Swarm\" "},{"title":"Send Messages in a Test Network","type":1,"pageTitle":"PSS Messaging","url":"docs/advanced/pss#send-messages-in-a-test-network","content":"Now, let's see this in action by setting up two Bee nodes on a test network, connecting them, and sending PSS messages from one to the other. First start two Bee nodes. We will start them with distinct ports for the api, debug api and p2p port so that there are no conflicts, since they will be running on the same computer. Run the following command to start the first node. Note that we are passing \"\" to the --bootnode argument so that our nodes will not connect to a network. Copy bee start \\ --api-addr=:8082 \\ --debug-api-enable \\ --debug-api-addr=:6062 \\ --data-dir=/tmp/bee2 \\ --bootnode=\"\" \\ --p2p-addr=:7072 \\ --swap-enable=false We must make a note of the Swarm overlay address, underlay address and public key which are created once each node has started. We find this information from the addresses endpoint of the Debug API. Copy curl -s localhost:6062/addresses | jq Copy { \"overlay\": \"7bc50a5d79cb69fa5a0df519c6cc7b420034faaa61c175b88fc4c683f7c79d96\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/7072/p2p/16Uiu2HAmP9i7VoEcaGtHiyB6v7HieoiB9v7GFVZcL2VkSRnFwCHr\", \"/ip4/192.168.0.10/tcp/7072/p2p/16Uiu2HAmP9i7VoEcaGtHiyB6v7HieoiB9v7GFVZcL2VkSRnFwCHr\", \"/ip6/::1/tcp/7072/p2p/16Uiu2HAmP9i7VoEcaGtHiyB6v7HieoiB9v7GFVZcL2VkSRnFwCHr\" ], \"ethereum\": \"0x0000000000000000000000000000000000000000\", \"public_key\": \"0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd\" } Now the same for the second node. Copy bee start \\ --api-addr=:8083 \\ --debug-api-enable \\ --debug-api-addr=:6063 \\ --data-dir=/tmp/bee3 \\ --bootnode=\"\" \\ --p2p-addr=:7073 \\ --swap-enable=false Copy curl -s localhost:6063/addresses | jq Copy { \"overlay\": \"a231764383d7c46c60a6571905e72021a90d506ef8db06750f8a708d93fe706e\", \"underlay\": [ \"/ip4/127.0.0.1/tcp/7073/p2p/16Uiu2HAmAqJkKJqZjNhuDtepc8eBANM9TvagaWUThfTN5NkfmKTq\", \"/ip4/192.168.0.10/tcp/7073/p2p/16Uiu2HAmAqJkKJqZjNhuDtepc8eBANM9TvagaWUThfTN5NkfmKTq\", \"/ip6/::1/tcp/7073/p2p/16Uiu2HAmAqJkKJqZjNhuDtepc8eBANM9TvagaWUThfTN5NkfmKTq\", \"/ip4/81.98.94.4/tcp/25178/p2p/16Uiu2HAmAqJkKJqZjNhuDtepc8eBANM9TvagaWUThfTN5NkfmKTq\" ], \"ethereum\": \"0x0000000000000000000000000000000000000000\", \"public_key\": \"02d68d57d9f3fe539990cdf03e7de96d56a5c68b42515bc465acec4edc5cedfe35\" } Because we configured the nodes to start with no bootnodes, neither node should have peers yet. Copy curl -s localhost:6062/peers | jq Copy curl -s localhost:6063/peers | jq Copy { \"peers\": [] } Let's connect node 2 to node 1 using the localhost (127.0.0.1) underlay address for node 1 that we have noted earlier. Copy curl -XPOST \\ localhost:6063/connect/ip4/127.0.0.1/tcp/7072/p2p/16Uiu2HAmP9i7VoEcaGtHiyB6v7HieoiB9v7GFVZcL2VkSRnFwCHr Now, if we check our peers endpoint for node 1, we can see our nodes are now peered together. Copy curl -s localhost:6062/peers | jq Copy { \"peers\": [ { \"address\": \"a231764383d7c46c60a6571905e72021a90d506ef8db06750f8a708d93fe706e\" } ] } Of course, since we are p2p, node 2 will show node 1 as a peer too. Copy curl -s localhost:6063/peers | jq Copy { \"peers\": [ { \"address\": \"7bc50a5d79cb69fa5a0df519c6cc7b420034faaa61c175b88fc4c683f7c79d96\" } ] } We will use websocat to listen for PSS messages topic ID test-topic on our first node. Copy websocat ws://localhost:8082/pss/subscribe/test-topic Now we can use PSS to send a message from our second node to our first node. Since our first node has a 2 byte address prefix of a231, we will specify this as the targets section in our POST request's URL. We must also include the public key of the recipient as a query parameter so that the message can be encrypted in a way only our recipient can decrypt. Copy curl \\ -XPOST \"localhost:8083/pss/send/test-topic/7bc5?recipient=0349f7b9a6fa41b3a123c64706a072014d27f56accd9a0e92b06fe8516e470d8dd\"\\ --data \"Hello Swarm\" The PSS API endpoint will now create a PSS message for it's recipient in the form of a 'Trojan Chunk' and send this into the network so that it may be pushed to the correct neighbourhood. Once it is received by it's destination target it will be decrypted and determined to be a message with the topic we are listening for. Our second node will decrypt the data and we'll see a message pop up in our websocat console! Copy sig :: ~ ¬ª websocat ws://localhost:8082/pss/subscribe/test-topic Hello Swarm Congratulations! üéâ You have sent your first encrypted, zero leak message over Swarm! "},{"title":"Track Upload Status","type":0,"sectionRef":"#","url":"docs/advanced/tags","content":"","keywords":""},{"title":"How to track the status of your upload","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#how-to-track-the-status-of-your-upload","content":"The status of your upload can be followed by using tags. A tag is a label given to all chunks that belong to the same upload instruction. info The tag label is only known to your node. It is not communicated to the network, only your node will known that a set of chunks belong together. "},{"title":"Generate the tag identifier","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#generate-the-tag-identifier","content":"To get the status of an upload, we can: Generate the tag before the upload and pass this tag on upload info To follow the status of your upload while it is splitting you must generate the tag yourself beforehand since the tag-uid is usually communicated only after splitting is complete. Create a tag by sending a POST request to the tag API endpoint: Copy curl -s -XPOST http://localhost:8080/tags | jq .uid > 4074122506 Use the returned UID to instruct your POST upload request to track this upload using the Swarm-Tag-UID header: Copy curl -F file=@bee.jpg -H \"Swarm-Tag-UID: 4074122506\" http://localhost:8080/files info If you don't want to track the splitting stage, you may omit the Swarm-Tag-UID header, and a new tag will be automatically created and returned in the HTTP response header after splitting is complete. You can use curl --verbose to view the HTTP response headers such as the Swarm-Tag-UID header. "},{"title":"Ask for the Current Status","type":1,"pageTitle":"Track Upload Status","url":"docs/advanced/tags#ask-for-the-current-status","content":"To get the current status of an upload, send a GET request to the tag/<Swarm-Tag-UID> API endpoint. Copy curl http://localhost:8080/tags/4074122506 | jq The response contains all the information that you need to follow the status of your file as it is synced with the network. Copy { \"total\": 36, //the total number of chunks, 0 if the upload is still splitting \"split\": 36, //the current number of chunks which have been split and packed in the Binary Merkle Tree \"seen\": 0, //chunks already seen by the network \"stored\": 36, //the total number of chunks stored and queued for sending (if not seen before) \"sent\": 36, //the total number of chunks sent to the network \"synced\": 0, //the total number of receipts received \"uid\": 4074122506, \"name\": \"unnamed_tag_1598627762\", \"address\": \"\", \"startedAt\": \"2020-08-28T16:16:02.071929+01:00\" //when the tag was created (ISO 8601 format) } "},{"title":"API and Debug API","type":0,"sectionRef":"#","url":"docs/api-reference/api-reference","content":"","keywords":""},{"title":"API","type":1,"pageTitle":"API and Debug API","url":"docs/api-reference/api-reference#api","content":"The API-endpoint exposes all functionality to upload and download content to and from the Swarm network. By default, it runs on port :8080. Detailed information about Bee API endpoint can be found here: Bee API reference. "},{"title":"Debug API","type":1,"pageTitle":"API and Debug API","url":"docs/api-reference/api-reference#debug-api","content":"The debug-API is disabled by default but be enabled by setting the enable-debug-api configuration option to true. The debug-API exposes functionality to inspect the state of your Bee node while it is running, as well as some other features that should not be exposed to the public internet. The Debug API runs on port :6060 by default. Debug API reference., danger Your Debug API should not be exposed to the public internet, make sure that your network has a firewall which blocks port 6060, or bind the Debug API to localhost "},{"title":"SWAP Bandwidth Accounting","type":0,"sectionRef":"#","url":"docs/advanced/swap","content":"Underpinning Swarm is a set of accounting protocols that have been developed and prototyped during over 5 years of R&D. Your Beta Bee node contains functionality giving it the ability to keep track of bandwidth exchanges with all it's peers, issue and cache cheques using smart contracts which live on EVM compatible blockchain. Currently we are in the testing phase using the Goerli testnet. We would love for you to get involved, help us try out these incentives and maybe even earn some gBZZ! info Learn more about how SWAP and the other accounting protocols work by reading the Book of Swarm. To investigate our accounting, let's upload a 20mb file to the network so we can see some traffic being generated as Bee begins to push chunks into the network. In order to do this, we will pay a forwarding cost in each node that passes the chunk on. First, we will need to run our Bee node with a RPC endpoint, debug api enabled and verbosity set to TRACE. Copy bee start \\ --verbosity 5 \\ --swap-enable \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Copy dd if=/dev/urandom of=/tmp/test.txt bs=1m count=20 curl -F file=@/tmp/test.txt http://localhost:8080/files If we set --verbosity 5 in our Bee configuration, we will be able to see these individual transactions being recorded on our node's internal per peer ledgers. Copy ... TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 150, new balance is -2300 TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 150, new balance is -2450 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk bd638a8c58f48ca6729b6d86b7623c524f7c74e4ed9bc71712637b8b50234ce0 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk b06309f68a89f1a6513d3231ad2d5335b3c0309972513a4f28d949e7fc47e39d TRAC[2020-09-28T15:18:08+01:00] crediting peer e00460ced3c509dfd72b6ce915c764b13669e65f95b3ba84dcb7d4b6d18a0b11 with price 150, new balance is -8780 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk a81c8ee73284f8c0d1b7cfa0b0907c5b12c3b56d1accd08835543771e93c7fc5 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk 056f59ca65bdfb8b7499c44a7d8d8ed29d7b4eaa39621b468bdbb69fc2de4b87 TRAC[2020-09-28T15:18:08+01:00] crediting peer e00460ced3c509dfd72b6ce915c764b13669e65f95b3ba84dcb7d4b6d18a0b11 with price 150, new balance is -8930 TRAC[2020-09-28T15:18:08+01:00] pusher pushed chunk a3c6958271aab4e1ad53206898f045a169a57aeaab0531cbcf497c8ff10a7800 TRAC[2020-09-28T15:18:08+01:00] crediting peer f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47 with price 120, new balance is -2570 ... We also have a rich set of features to be able to query the current accounting state of your node. For example, you may query your node's current balance by send a POST request to the balances endpoint. Copy curl localhost:6060/chequebook/balance | jq Copy { \"totalBalance\": 10000000, \"availableBalance\": 9640360 } It is also possible to examine per-peer balances. Copy curl localhost:6060/balances | jq Copy { \"balances\": [ //... { \"peer\": \"d0bf001e05014fa036af97f3d226bee253d2b147f540b6c2210947e5b7b409af\", \"balance\": -85420 }, { \"peer\": \"f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47\", \"balance\": -75990 } //... ] } In Swarm, these per-peer balances simply represent trustful agreements between nodes. Tokens only actually change hands when a node settles a cheque. This can either be triggered manually or when a certain threshold is reached with a peer. In this case, a settlement takes place. You may view these using the settlements endpoint. Copy curl localhost:6060/settlements | jq Copy { \"totalreceived\": 0, \"totalsent\": 359640, \"settlements\": [ // ... { \"peer\": \"d0bf001e05014fa036af97f3d226bee253d2b147f540b6c2210947e5b7b409af\", \"received\": 0, \"sent\": 90070 }, { \"peer\": \"f1e2872581de18bdc68060dc8edd3aa96368eb341e915aba86b450486b105a47\", \"received\": 89890, \"sent\": 0 } // ... ] } More info can be found by using the chequebook api. Copy curl localhost:6060/chequebook/cheque | jq Copy { \"totalreceived\": 0, \"totalsent\": 718030, \"settlements\": [ //... { \"peer\": \"dce1833609db868e7611145b48224c061ea57fd14e784a278f2469f355292ca6\", \"received\": 0, \"sent\": 89550 } //... ] } As our node's participation in the network increases, we will begin to see more and more of these balances arriving. In the case that we have received a settlement from another peer, we can ask our node to perform the relevant transactions on the blockchain, and cash our earnings out. To do this, we simply POST the relevant peer's address to the cashout endpoint. Copy curl -XPOST http://localhost:6060/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b Copy {\"transactionHash\":\"0xba7b500e21fc0dc0d7163c13bb5fea235d4eb769d342e9c007f51ab8512a9a82\"} You may check the status of your transaction using Goerli Etherscan Finally, we can now see the status of the cashout transaction by sending a GET request to the same URL. Copy curl http://localhost:6060/chequebook/cashout/d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b | jq Copy { \"peer\": \"d7881307e793e389642ea733451db368c4c9b9e23f188cca659c8674d183a56b\", \"chequebook\": \"0xae315a9adf0920ba4f3353e2f011031ca701d247\", \"cumulativePayout\": 179160, \"beneficiary\": \"0x21b26864067deb88e2d5cdca512167815f2910d3\", \"transactionHash\": \"0xba7b500e21fc0dc0d7163c13bb5fea235d4eb769d342e9c007f51ab8512a9a82\", \"result\": { \"recipient\": \"0x312fe7fde9e0768337c9b3e3462189ea6f9f9066\", \"lastPayout\": 179160, \"bounced\": false } } Success, we earned our first gBZZ! üêù","keywords":""},{"title":"Architecture","type":0,"sectionRef":"#","url":"docs/architecture/architecture","content":"Developers who want to develop client implementations and others who want to understand the underlying concepts and design of Swarm are invited to read theBook of Swarm, which is the authoritative reference.","keywords":""},{"title":"Community","type":0,"sectionRef":"#","url":"docs/community/community","content":"Swarm is all about community. We want to make sure you have the best possible experience as you join and enjoy being a part of the our new internet. Swarm has a vibrant community of wonderful individuals who are eager to answer any questions and graciously welcome you to our swarm. Join us at our self-sovereign Bee Hive for peace, love, unity, respect, community, assistance and lots of highly obscure chat about cryptography. Thanks for being here with us, making a difference, we appreciate you! üêù","keywords":""},{"title":"Host Your Website on Swarm","type":0,"sectionRef":"#","url":"docs/getting-started/host-your-website-using-ens","content":"","keywords":""},{"title":"Enable ENS on Your Node","type":1,"pageTitle":"Host Your Website on Swarm","url":"docs/getting-started/host-your-website-using-ens#enable-ens-on-your-node","content":"In order to resolve ENS names using your API endpoints, you must specify a valid ENS resolver endpoint when starting your Bee node. We recommend that users run their own Geth node, which can be trusted absolutely, however service providers such as https://cloudflare-eth.com or Infura may suffice. Public gateways such as gateway.ethswarm.org will also usually provide ENS resolution. Copy bee start --resolver-options \"https://cloudflare-eth.com\" "},{"title":"Link an ENS domain to a website.","type":1,"pageTitle":"Host Your Website on Swarm","url":"docs/getting-started/host-your-website-using-ens#link-an-ens-domain-to-a-website","content":"First we will need to upload the website assets to Swarm in order to get it's Swarm reference hash, see uploading a directory for more information. This time we will also include the Swarm-Index-Document header set to the index.html. This will cause Bee to serve each directories index.html file as default when browsing to the directory root / url. We will also provide a custom error page, using the Swarm-Error-Document header. In the case that your website is a single page app, where you would like to direct to the javascript history api powered router, you may provide the index.html page for both settings. Copy curl \\ -X POST \\ -H \"Content-Type: application/x-tar\" \\ -H \"Swarm-Index-Document: index.html\" \\ -H \"Swarm-Error-Document: index.html\" \\ --data-binary @my_website.tar http://localhost:8080/dirs Copy {\"reference\":\"b25c89a401d9f26811680476619a1eb4a4e189e614bc6161cbfd8b343214917b\"} Next, we add a Content record to your ENS domain's resolver contract. We recommend the excellent ENS Domains Dapp used with the Metamask browser extension for registering and administrating your ENS domain. Once you have registered your name, and have connected Metamask with the relevant Ethereum account, you must first set the resolver to use the public ENS if you have not already done so. First, navigate to 'My Names', and select the name you would like to link your Swarm content to. Press 'Set' next to your resolver record.  Choose the public resolver.  Press add a record.  Choose the Content Record type from the drop down menu.  Add the Swarm reference you created earlier and press 'save'.  Verify the Content Record has been created!  Done! üëè Now you will be able to see your website hosted using the ENS name instead of the Swarm Reference!  "},{"title":"Useful Developer Info","type":0,"sectionRef":"#","url":"docs/bee-developers/useful-dev-info","content":"Welcome to the Dev area! We love PR's! üêù We would would love you to get involved with our Github repo. All the action can be found in our Mattermost instance, The Beehive. Sign up and get involved with our buzzing hive of daily dev chat. If you would like to contribute, please read the coding guidelines before you get started. Installation from source is described in the Installation. Testing a connection with PingPong protocol# To check if two nodes are connected and to see the round trip time for message exchange between them, get the overlay address from one node, for example local node 2: Copy curl localhost:6062/addresses Make sure that Debug API is enabled and address configured as in examples above. And use that address in the Debug API call on another node, for example, local node 1: Copy curl -XPOST localhost:6061/pingpong/d4440baf2d79e481c3c6fd93a2014d2e6fe0386418829439f26d13a8253d04f1 Generating protobuf# To process protocol buffer files and generate the Go code from it two tools are needed: protocprotoc-gen-gogofaster Makefile rule protobuf can be used to automate protoc-gen-gogofaster installation and code generation: Copy make protobuf Tracing# Developers can gain an additional level of insight into the node by enabling tracing. To make use of Tracing, we advice to make use of jaeger. Set up tracing by: Start jaeger:docker run -p 6831:6831/udp -p 16686:16686 jaegertracing/all-in-one:latest start locally two bee nodes (different data dirs and ports) and connect them (see \"Start a test network\" in the advanced section) with --tracing flag provided for both nodes Make a call to the PingPong API on one of the two nodes (curl -XPOST localhost:6061/pingpong/<overlay address other node>). Validate tracing in the web interface (http://localhost:16686/).","keywords":""},{"title":"Store with Encryption","type":0,"sectionRef":"#","url":"docs/getting-started/store-with-encryption","content":"In Swarm, all data is public by default. To protect sensitive content, it must be encrypted so that only authorised users are able to decrypt and then view the plaintext content. The Bee client provides a facility to encrypt files and directories while uploading which are only able to be read by users with access to the corresponding decryption key. Encrypt and Upload a File# To encrypt a file simply include the Swarm-Encrypt: true header with your HTTP request. Copy $ curl -F file=@bee.jpg -H \"Swarm-Encrypt: true\" http://localhost:8080/files When successful, the Bee client will return a 64 byte reference, instead of the usual 32 bytes. Copy {\"reference\":\"f7b1a45b70ee91d3dbfd98a2a692387f24db7279a9c96c447409e9205cf265baef29bf6aa294264762e33f6a18318562c86383dd8bfea2cec14fae08a8039bf3\"} Here we see that, when using the Bee node's encryption function, the reference hash that is returned is 128 hex characters long. The first 64 characters of this are the familiar Swarm address - the reference that allows us to retrieve the data from the swarm - it is the same as the reference we would get uploading unencrypted files to using Bee it is safe to share. The second second part of the reference is a 64 character decryption key which is required to decrypt the referenced content and view the original data in the clear, this is sensitive key material and must be kept private. It is important that this data is not be sent in requests to a public gateway as this would mean that gateway would be able to decrypt your data. However, if you are running a node on your local machine, you may safely use the api bound to localhost. The key material is never exposed to the network so your data remains safe. info Encryption is disabled by default on all Swarm Gateways to keep your data safe. Install Bee on your computer to use the encryption feature. Download and Decrypt a File# To retrieve your file, simply supply the full 64 byte string to the files endpoint, and the Bee client will download and decrypt all the relevant chunks and restore them to their original format. Copy $ curl -OJ http://localhost:8080/files/f7b1a45b70ee91d3dbfd98a2a692387f24db7279a9c96c447409e9205cf265baef29bf6aa294264762e33f6a18318562c86383dd8bfea2cec14fae08a8039bf3 danger Never use public gateways when requesting full encrypted references, the hash contains sensitive key information which should be kept private. Run your own node to get the use Bee's encryption features.","keywords":""},{"title":"Start Your Node","type":0,"sectionRef":"#","url":"docs/getting-started/start-your-node","content":"","keywords":""},{"title":"Create Your Wallet","type":1,"pageTitle":"Start Your Node","url":"docs/getting-started/start-your-node#create-your-wallet","content":"When you first run Bee, you will be asked to input a user password. It is important to choose a strong unique password, as this will protect your valuable private key which is generated during startup. This secret key is stored encrypted in your Bee data directory (usually ~/.bee). It represents your Swarm Address - your anonymous identity in Swarm. Copy bee start > Welcome to the Swarm.... Bzzz Bzzzz Bzzzz \\ / \\ o ^ o / \\ ( ) / ____________(%%%%%%%)____________ ( / / )%%%%%%%( \\ \\ ) (___/___/__/ \\__\\___\\___) ( / /(%%%%%%%)\\ \\ ) (__/___/ (%%%%%%%) \\___\\__) /( )\\ / (%%%%%) \\ (%%%) ! Password: "},{"title":"SWAP Bandwidth Incentives","type":1,"pageTitle":"Start Your Node","url":"docs/getting-started/start-your-node#swap-bandwidth-incentives","content":"SWAP mode is now enabled by default for testing on Swarm mainnet, you must include configuration paramaters specifying a valid Goerli Testnet RPC endpoint. You can run your own Goerli node, or use a RPC provider such as rpc.slock.it/goerli or Infura. When running your Bee node with SWAP enabled for the first time, your Bee node will deploy a 'chequebook' contract using the canonical factory contract which is deployed by Swarm. A factory is used to ensure every node is using legitimate and verifiable chequebook contracts. Once the chequebook is deployed, Bee will deposit a certain amount of gBZZ (Goerli BZZ tokens) in the chequebook contract so that it can pay other nodes in return for their services. In order to interact with the Goerli blockchain to deploy contracts and make payments, we must fund our account with Goerli ETH (GETH), and to make payments in return for services our account must also own some Goerli BZZ (gBZZ). We can get both tokens for trial purposes from the Swarm Goerli Faucet. To find out your Ethereum address, we can simply run our Bee node and point it at the Goerli rpc endpoint. Copy bee start \\ --verbosity 5 \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable --bootnode /dnsaddr/bootnode.staging.ethswarm.org Since we haven't yet funded our account, we will see a message in our logs asking us to fund our Ethereum account. Navigate to the Swarm Goerli Faucet and submit your address, ensuring it is prepended with the characters 0x to the faucet, fill out the recaptcha and wait for confirmation that your gETH and gBZZ have been dispensed. Now, we can run our Bee node and we will start to see Bee creating and waiting for transactions to complete. Please be patient as this might take a few moments. Copy INFO[2020-09-28T14:59:38+01:00] no chequebook found, deploying new one. INFO[2020-09-28T14:59:39+01:00] deploying new chequebook in transaction 5c2949675b49d069c4c5755e1901aa59fa4224ea2a763efe78a5293f36e04370 INFO[2020-09-28T14:59:57+01:00] deployed chequebook at address a22c864fe5bd53cc3ae130709647a0e60e67f714 INFO[2020-09-28T14:59:57+01:00] depositing 100000000 token into new chequebook INFO[2020-09-28T14:59:57+01:00] sent deposit transaction c25714a0569131707513c68f6108553bb861131253230a606a26d390e790e0f1 INFO[2020-09-28T15:00:12+01:00] successfully deposited to chequebook Now our chequebook is deployed, and credited with an initial deposit of gBZZ ready to be given to reward our fellow busy Bee nodes for their services. You will also provide services, and be rewarded by your peers for services you provide for them. For more info on bandwidth accounting, see SWAP Bandwidth Accounting. "},{"title":"Join the Swarm","type":1,"pageTitle":"Start Your Node","url":"docs/getting-started/start-your-node#join-the-swarm","content":"If all goes well, you will see your node automatically begin to connect to other Bee nodes all over the world. Copy INFO[2020-08-29T11:55:16Z] greeting <Hi I am a very buzzy bee bzzzz bzzz bzz. üêù> from peer: b6ae5b22d4dc93ce5ee46a9799ef5975d436eb63a4b085bfc104fcdcbda3b82c Now your node will begin to request chunks of data that fall within your radius of responsibilty - data that you will then serve to other p2p clients running in the swarm. Your node will then begin to respond to requests for these chunks from other peers, for which you will soon be rewarded in BZZ. Incentivisation In Swarm, storing chunks of data, serving and forwarding them to other nodes earns you rewards - get ready for exciting incentivisation features coming soon at Swarm Live! Your Bee client has now generated an elliptic curve keypair similar to an Ethereum wallet. These are stored in your data directory, in the keys folder. Keep Your Keys and Password Safe! Your keys and password are very important, back these files up and store them in a secure place that only you have access to. With great privacy comes great responsibility - while no-one will ever be able to guess your key, but you will not be able to recover them if you lose them either, so be sure to look after them well and keep secure backups. "},{"title":"Getting help","type":1,"pageTitle":"Start Your Node","url":"docs/getting-started/start-your-node#getting-help","content":"The CLI has documentation build-in. Running bee gives you an entry point to the documentation. Running bee start -h or bee start --help will tell you how you can configure you bee node via the command line arguments. You may also check out the configuration guide, or simply run your Bee terminal command with the --help flag, eg. bee start --help or bee --help. "},{"title":"Upload a Directory","type":0,"sectionRef":"#","url":"docs/getting-started/upload-a-directory","content":"","keywords":""},{"title":"Upload the Directory Containing Your Website","type":1,"pageTitle":"Upload a Directory","url":"docs/getting-started/upload-a-directory#upload-the-directory-containing-your-website","content":"First, use the tar command line utility to create an archive containing all the files of your directory. If uploading a website, we must take care to ensure that the index.html file is at the root of the directory tree. Copy tree build > my_website ‚îú‚îÄ‚îÄ assets ‚îÇ ‚îî‚îÄ‚îÄ style.css ‚îî‚îÄ‚îÄ index.html Copy $ tar -cf my_website.tar assets index.html Next, simply POST the tar file as binary data to Bee's dir endpoint, taking care to include the header Content Type: application/x-tar. Copy curl \\ -X POST \\ -H \"Content-Type: application/x-tar\" \\ --data-binary @my_website.tar http://localhost:8080/dirs When the upload is successful, Bee will return a json document containing the Swarm Reference. Copy {\"reference\":\"b25c89a401d9f26811680476619a1eb4a4e189e614bc6161cbfd8b343214917b\"} Now, simply navigate your browser to view the reference using the bzz endpoint and your website will be served! http://localhost:8080/bzz/b25c89a...214917b/index.html Other files are served at their relative paths, e.g. http://localhost:8080/bzz/b25c89a...214917b/assets/style.css Once your data has been fully processed into the network, you will then be able to retrieve it from any Bee node. https://gateway.ethswarm.org/bzz/b25c89a...214917b/index.html "},{"title":"Upload and Download Files","type":0,"sectionRef":"#","url":"docs/getting-started/upload-and-download","content":"","keywords":""},{"title":"Quick Upload","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#quick-upload","content":"Once your Bee node is running, a HTTP API is enabled for you to interact with. The command line utility curl is a great way to interact with a Bee node's API. First, let's check to see if the API is running as expected... Copy curl http://localhost:8080 > Ethereum Swarm Bee Once running, a file can be uploaded by making an HTTP POST request to the files endpoint of the Bee API. Copy curl -F file=@bee.jpg http://localhost:8080/files where bee.jpg is the path to the file that you would like to upload. danger Data uploaded to the swarm is always public. In Swarm, sensitive files must be encrypted before uploading to ensure their contents always remains private. When succesful, a json formatted response will be returned, containing a swarm reference or hash which is the address of the uploaded file, for example: Copy {\"reference\":\"042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4\"} Keep this address safe, as we'll use it to retrieve our content later on. In Swarm, every piece of data has a unique address which is a unique and reproducible cryptographic hash digest. If you upload the same file twice, you will always receive the same hash. This makes working with data in Swarm super secure! info If you are uploading a large file it is useful to track the status of your upload as it is processed into the network. Head over to the advanced usage section to learn how to follow the status of your upload. Once your file has been completely synced with the network, you will be able to turn off your computer and other nodes will take over to serve the data for you! "},{"title":"Download","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#download","content":"Once your file is uploaded into Swarm, it can be retrieved with a simple HTTP GET request. Substitute the hash in the last part of the url to be the reference to your own data. Copy curl -OJ http://localhost:8080/files/042d4fe94b946e2cb51196a8c136b8cc335156525bf1ad7e86356c2402291dd4 You may even simply navigate to the URL in your browser: http://localhost:8080/files/042d4fe...2291dd4 "},{"title":"Public Gateways","type":1,"pageTitle":"Upload and Download Files","url":"docs/getting-started/upload-and-download#public-gateways","content":"To share files with someone who isn't running a Bee node yet, simply change the host in the link to be one of our public gateways. Send the link to your friends, and they will be able to download the file too! https://gateway.ethswarm.org/files/042d4fe...2291dd4 "},{"title":"Working With Your Node","type":0,"sectionRef":"#","url":"docs/getting-started/working-with-your-node","content":"","keywords":""},{"title":"Debug API","type":1,"pageTitle":"Working With Your Node","url":"docs/getting-started/working-with-your-node#debug-api","content":"The Debug API provides a privileged environment where you are able to interact with your Bee node to get more information about the status of your node. danger Never expose your Debug API to the public internet, make sure to use a firewall or bind to localhost, as we have in the example below. To use the Debug API we must first configure Bee to enable it, as it is disabled by default. Copy $ bee start --debug-api-enable --debug-api-addr=localhost:6060 Checking Connectivity# First, let's check how many nodes we are currently connected to. Copy curl -s http://localhost:6060/peers | jq '.peers | length' 23 Great! We can see that we are currently connected and sharing data with 23 other nodes! info Here we are using the jq command line utility to count the amount of objects in the peers array in the JSON response we have received from our Debug API, learn more about how to install and use jq here. Inspect Network Topology# We can gain even more insight into how your Bee client is becoming a part of the global network your using the topology endpoint. Copy curl -X GET http://localhost:6060/topology | jq In this example, our node is beginning to form a healthy network. We hope to see our node adding and connecting to nodes in as many bins as possible. Learn more about promiximity order bins and how your Bee node becomes part of the ordered p2p network in The Book of Swarm. Copy { \"baseAddr\": \"793cdae71d51b0ffc09fecd1c5b063560150cf2e1d55058bad4a659be5894ab1\", \"population\": 159, \"connected\": 19, \"timestamp\": \"2020-08-27T19:24:16.451187+01:00\", \"nnLowWatermark\": 2, \"depth\": 4, \"bins\": { \"bin_0\": { \"population\": 77, \"connected\": 4, \"...\": \"...\" }, \"bin_1\": { \"population\": 37, \"connected\": 4, } } } } Find out more about what you can do with the Debug API here. "},{"title":"Build from Source","type":0,"sectionRef":"#","url":"docs/installation/build-from-source","content":"","keywords":""},{"title":"Build from Source","type":1,"pageTitle":"Build from Source","url":"docs/installation/build-from-source#build-from-source","content":"1) Clone the repository: Copy git clone https://github.com/ethersphere/bee cd bee 2) Use git to find the latest release: Copy git describe --tags 3) Checkout the required version: Copy git checkout master 4) Build the binary: Copy make binary 5) Check you are able to run the bee command. Success can be verified by running: Copy dist/bee version > 0.3.1 6) (optional) Additionally, you may also like to move the Bee binary to somewhere in your $PATH Copy sudo cp dist/bee /usr/local/bin/bee "},{"title":"Configuring Your Bee Node","type":0,"sectionRef":"#","url":"docs/installation/configuration","content":"","keywords":""},{"title":"Configuration file","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#configuration-file","content":"Bee can also be configured by providing a yaml configuration file using the --config flag. Copy bee start --config ~/bee-config.yaml  tip Run bee printconfig &> bee-default.yaml to print a default version of the configuration file. "},{"title":"Automatically generate a config file","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#automatically-generate-a-config-file","content":"Configuration files can be easily generated by simply substituting the start command with printconfig when starting Bee using the command line. Example# Here we substitute start for printconfig when specifying arguments at the command line. Copy bee printconfig \\ --verbosity=5 \\ &> bee-config.yaml This produces the following file contents, showing the default configuration of Bee, with some added log verbosity: Copy api-addr: :8080 bootnode: - /dnsaddr/bootnode.ethswarm.org clef-signer-enable: false clef-signer-endpoint: \"\" config: /Users/sig/.bee.yaml cors-allowed-origins: [] data-dir: /Users/sig/.bee db-capacity: \"5000000\" debug-api-addr: :6060 debug-api-enable: false gateway-mode: false global-pinning-enable: false help: false nat-addr: \"\" network-id: \"1\" p2p-addr: :7070 p2p-quic-enable: false p2p-ws-enable: false password: \"\" password-file: \"\" payment-early: \"10000\" payment-threshold: \"100000\" payment-tolerance: \"10000\" resolver-options: [] standalone: false swap-enable: true swap-endpoint: http://localhost:8545 swap-factory-address: \"\" swap-initial-deposit: \"100000000\" tracing-enable: false tracing-endpoint: 127.0.0.1:6831 tracing-service-name: bee verbosity: \"5\" welcome-message: \"\" "},{"title":"Configuration Options","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#configuration-options","content":"Bee provides the following options to customise your node. "},{"title":"Global","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#global","content":"--config# default /home/<user>/.bee.yaml The location of a yaml configuration file containing configuration instructions. See configuration. "},{"title":"Start","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#start","content":"--api-addr# default :8080 The ip and port the API will serve http requests from. Ommiting the IP part of the address will cause the server to listen to all requests. Argument values are of the form '132.132.132.132:8080'. --bootnode# default /dnsaddr/bootnode.ethswarm.org This is a multiaddr specifying the Bee bootnodes used for bootstrapping the network, it can be multiple values. By default a node connects to the Swarm mainnet. When using a private or test network, network specific bootnodes must be set. Any Bee node in a network can act as a bootnode. --clef-signer-enable# default false Set this to true to enable signing using Ethereum's 'Clef' external signer. Clef is an new feature which requires a corresponding rules files or running in advanced mode to allow for auto-signing of handshakes and cheques. --clef-signer-endpoint# default default path for clef for each host operating system You may also specify a custom ipc file path for your Clef signer. --cors-allowed-origins# default [] Http origin domains or wildcards defining these, which the API will allow responses to, e.g. Copy $ bee start --cors-allowed-origins=\"*\" $ bee start --cors-allowed-origins=\"https://website.ethswarm.org\" --data-dir# default /home/<user>/.bee The location on your disk where Bee stores it's data. This consists of the following three types of data... 1. Chunk Data# This consists of chunks and files that you have pinned locally, cached chunks you have requested, or chunks within your radius of responsibility which you are responsible for serving to your peers. 2. State Data# This is information about the local state of your Bee node. 3. Keystore Data# These files contain encrypted versions of your private key and should be backed up and kept private. danger Keep the key files in your keystore data directory safe! They are the cryptographic proof of your network identity and cannot be recovered. --db-capacity# default 5000000 Chunk database capacity in chunks. A chunk is 4096 kb in size, so the total database capacity in kb can be estimated as db-capacity * 4096. The default 5,000,000 chunks is therefore approximately 20.5gb. We recommend a minimum of 2.5gb capacity for a node to be able to effectively function in the network. Light nodes that do not participate in storing may be able to specify less. --debug-api-addr# default :6060 The IP and port the Debug API will serve http requests from. Ommiting the IP part of the address will cause the server to listen to all requests. --debug-api-enable must be set to true. --debug-api-enable# default false Set this to true to enable access to the Debug API --gateway-mode# default false Set this to true to disable a set of sensitive features in the API to ensure that it is safe to expose your api-addr to the public internet. --global-pinning-enable# default false Enables the Global Pinning functionality when set to true. --nat-address# default \"\" Sets the expected public IP. Normally this is generated automatically, but in certain circumstances it may be desirable to set it manually. --network-id# default 1 The network ID for which to accept new connections. Set to 1 for mainnet. --p2p-addr# default :7070 The ip and port to listen for p2p protocol messages. --p2p-quic-enable# default false --p2p-ws-enable# default false Enables web-sockets transport for p2p communications. --password# default \"\" Password used to decrypt Swarm identity keys. danger Passing passwords as command line arguments is insecure. Use a password file or environment variables in production environments. --password-file# default \"\" The path to a file that contains password for decrypting keys. The empty string assumes no file is presented. --payment-early# Amount in BZZ below the peers payment threshold which causes Bee to initiate settlement (default 10000) --payment-threshold# default 100000 The threshold in BZZ where you expect to get paid from your peers. --payment-tolerance# default 10000 The excess debt above payment threshold in BZZ where you disconnect from your peer. "},{"title":"--resolver-options","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#--resolver-options","content":"default eth:0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e ENS API endpoint for a TLD, with contract address. Multiple values can be provided. Settings should be provided in the format [tld:][contract-addr@]url A default top level domain and resolver contract address are provided, but an ENS/Geth endpoint must be provided to enable this functionality. --standalone# default false Set this flag if we would like the node not to try to connect to the network. Useful for development. --swap-enable# default true --swap-endpoint# default http://localhost:8545 SWAP ethereum blockchain endpoint. --swap-factory-address# default anointed contract for the current blockchain id --swap-initial-deposit# default 100000000 --tracing-enable# default false Send tracing spans to the tracing service. More information how to configure and visualize tracing data is available on /docs/bee-developers/useful-dev-info#tracing. --tracing-endpoint# default 127.0.0.1:6831 The URL where the tracing service listens for Thrift protocol UDP messages. --tracing-service-name# default bee Bee service identifier in tracing spans. --verbosity# default info 0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=trace --welcome-message# default \"\" Custom welcome message to be displayed to peers on succesful connection. "},{"title":"Environment variables","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#environment-variables","content":"Bee config may also be passed using environment variables. Environment variables are set as variables in your operating systems session or systemd configuration file. To set an environment variable, type the following in your terminal session. Copy $ export VARIABLE_NAME=variableValue Verify if it is correctly set by running echo $VARIABLE_NAME. All available configuration options are also available as prefixed, captilised and underscored environment variables. e.g. --api-addr becomes BEE_API_ADDR. "},{"title":"Precedence Order of Configuration","type":1,"pageTitle":"Configuring Your Bee Node","url":"docs/installation/configuration#precedence-order-of-configuration","content":"Configuration is processed in the following ascending priority order of preference: Command Line VariablesEnvironment VariablesConfiguration File "},{"title":"Bee Using Docker","type":0,"sectionRef":"#","url":"docs/installation/docker","content":"","keywords":""},{"title":"Quick Start","type":1,"pageTitle":"Bee Using Docker","url":"docs/installation/docker#quick-start","content":"Try Bee out by simply running the following command in your Terminal. Copy docker run\\ -v /path/to/.bee-docker:/home/bee/.bee\\ -p 6060:6060 \\ -p 7070:7070 \\ -p 8080:8080\\ --rm -it bee:v1\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable info If starting your node for the first time, you will need to deploy a chequebook contract. See Start Your Node for more info. To persist files, mount a local directory as follows and enter the password used to encrypt your keyfiles. Note, Docker insists on absolute paths when mounting volumes, so you must replace /path/to/.bee-docker with a valid path from your local filesystem. Copy docker run\\ -v /path/to/.bee-docker:/home/bee/.bee\\ -p 6060:6060 \\ -p 7070:7070 \\ -p 8080:8080\\ --rm -it bee:v1\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable Once you have generated your keys, leave Bee to run in the background... Copy docker run\\ -d -v /path/to/.bee-docker:/home/bee/.bee\\ -p 6060:6060 \\ -p 7070:7070 \\ -p 8080:8080\\ --rm -it bee:v1\\ start \\ --welcome-message=\"Bzzzz bzzz bzz bzz. üêù\" \\ --swap-endpoint https://rpc.slock.it/goerli \\ --debug-api-enable "},{"title":"Versions","type":1,"pageTitle":"Bee Using Docker","url":"docs/installation/docker#versions","content":"Other versions of the Bee container are also available. Latest beta Release# Copy docker pull ethersphere/bee:beta Specific Versions# Copy docker pull ethersphere/bee:0.3.1 Edge# Copy docker pull ethersphere/bee:latest Please see the Docker Hub repository for more information. "},{"title":"Connectivity","type":0,"sectionRef":"#","url":"docs/installation/connectivity","content":"","keywords":""},{"title":"Networking Basics","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#networking-basics","content":"In a network, each computer is assigned an IP. Each IP is then subdivided into thousands of sockets or ports, each of which has an incoming and outgoing component. In a completely trusted network of computers, connections to or from any of these ports are allowed. However, to protect ourselves from nefarious actors when we join the wider internet, it is sometimes important to filter this traffic so that some of these ports are off limits to the public. In order to allow other Bee nodes we have previously not met to be able to send messages to our p2p port, usually 7070, we must ensure that our network is set up to receive incoming connections. info There are also some ports which you should never expose to the outside internet. Make sure that your api-addr, usually port 8080 is only exposed in Gateway Mode and your --debug-api-addr, usually 6060 is never exposed to the internet. It is good practice to employ one or more firewalls which block traffic on every port except for those for whom you are expecting it. "},{"title":"Your IP","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#your-ip","content":"When you connect to the internet, you are assigned a unique number called an IP Address. IP stands for Internet Protocol. The most prevalent IP version used is still the archaic IPv4 which was invented way back in 1981. IPv6 is available but not well used. Due to the mitigation of the deficiencies within this standard, we may encounter some complications. "},{"title":"Datacenters and Computers Connected Directly to the Internet","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#datacenters-and-computers-connected-directly-to-the-internet","content":"If you are renting space in a datacenter, the chances are that your computer will be connected directly to the real internet. This means that the IP of your networking interface will be directly set to be the same as your public IP. You can investigate this by running: Copy ifconfig or Copy ip address Your output should contain something like: Copy eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 178.128.196.191 netmask 255.255.240.0 broadcast 178.128.207.255 Here we can see our computer's public IP 178.128.196.191. This is the address that is used by other computers we connect to over the internet. We can verify this using a third party service such as icanhazip. Copy curl icanhazip.com Copy 178.128.196.191 If these numbers correspond, congratulations! You may skip the next section! "},{"title":"Home, Commercial and Business Networks and Other Networks Behind NAT","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#home-commercial-and-business-networks-and-other-networks-behind-nat","content":"To address the scarcity of IP numbers, Network Address Translation (NAT) was implemented. This approach creates a smaller, private network which many devices connect to in order to share a public IP. Traffic destined for the internet at large is then mediated by another specialised computer. In the cases of the a home network, this computer is the familiar home router, normally also used to provide a wifi network. If we run the above commands to find the computer's IP in this scenario, we will see a different output. Copy ip address Copy en0: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500 ... inet 192.168.0.10 netmask 0xffffff00 broadcast 192.168.0.255 ... Here we can see that, instead of the public IP, we can see that our computers IP is 192.168.0.10. This is part of the IP address space that the Internet Engineering Task Force has designated for private networks. As this IP won't work on the global internet, our router remembers that our computer has been assigned this IP. It then uses Network Address Translation to modify all requests from our computer to another computer somewhere in the internet. As the requests pass through the router it changes our local IP to the public IP of the router, and vice versa when the responses are sent back, from the public IP to the local one. Navigating Through the NAT# The presence of Network Address Translations presents two problems for p2p networking. The first is that it can be difficult for programs running on our computer to know our real public IP as it is not explicitly known by our computer's networking interface, which is configured with a private network IP. This is a relatively easy problem to solve as we can simply discover our public IP and then specify it in Bee's configuration, or indeed determine it using other means. The second issue is that our router has only 65535 ports to expose to the public network, however, each device on your private network is capable of exposing 65535 each. To the global internet, it appears that there is only one set of ports to connect to, whereas, in actual fact, there is a full set of ports for each of the devices which are connected to the private network. To solve this second problem, routers commonly employ an approach known as port forwarding. Bee's solution to these problems come in two flavours, automatic and manual. Automatic: Universal Plug and Play (UPNP)# UPNP is a protocol designed to simplify the administration of NAT and port forwarding by the end user by providing an API which software running within the network can use to ask the router for the external IP and to request for ports to be forwarded to the internal IP of the computer running the software. Copy UPNP can be considered a security risk as it exposes your (real) public IP to any processes running on your computer, and also allows them to open arbitrary ports which may be used to transfer malicious traffic, for example a [RAT](https://en.wikipedia.org/wiki/Remote_desktop_software#RAT). We recommend you disable UPNP on your router and use manual port forwarding as described below. Bee will use UPNP to determine your public IP, which is required for various internal processes. In addition to this, a request will be sent to your router to ask it to forward a random one of it's ports, which are exposed directly to the internet, to the Bee p2p port (usually 7070) which your computer is exposing only to the private network. Doing this creates a tunnel through which other Bee's may connect to your computer safely. If you start your Bee node in a private network with UPNP available, the output of the addresses endpoint of your debug API will look something like this: Copy [ \"/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip4/192.168.0.10/tcp/7070/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip6/::1/tcp/7070/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\", \"/ip4/86.98.94.9/tcp/20529/p2p/16Uiu2HAm5zcoBFWmqjDTwGy9RXepBFF8idy6Pr312obMwwxdJSUP\" ] Note that the port in the external multiaddress is the router's randomly selected 20529 which is forwarded by the router to 192.168.0.10:7070. Manual: Configure Your Router and Bee# Inspecting the underlay addresses in the output of the addresses endpoint our debug API, we can see addresses only for localhost 127.0.0.1 and our private network IP 192.168.0.10. Bee must be having trouble navigating our NAT. Copy [ \"/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/192.168.0.10/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip6/::1/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", ] To help fix the first problem, let's determine our public IP. Copy curl icanhazip.com Copy 86.98.94.9 Now we can simply supply this IP in our Bee configuration on startup. Solving our second problem is a little more difficult as we will need to interact with our router's firmware, which is a little cranky. Each router is different, but the concept is usually the same. Log in to your router by navigating your browser to your router's configuration user interface, usually at http://192.168.0.1. You will need to log in with a password. Sadly, passwords are often left to be the defaults, which can be found readily on the internet. Once logged in, find the interface to set up port forwarding. The Port Forward website provides some good information, or you may refer to your router manual or provider. Here, we will then set up a rule that forwards port 7070 of our internal IP 192.168.0.10 to the same port 7070 of our external IP. Now, when requests arrive at our external address 86.98.94.9:7070 they are modified by our router and forwarded to our internal IP and port 192.168.0.10:7070. Sometimes this can be a little tricky, so let's verify we are able to make a TCP connection using netcat. First, with Bee not running, let's set up a simple TCP listener using Netcat on the same machine we would like to run Bee on. Copy nc -l 0.0.0.0 7070 Copy nc -zv 86.98.94.9 7070 Copy Connection to 86.98.94.9 port 7072 [tcp/*] succeeded! Success! ‚ú® If this didn't work for you, check out our Debugging Connectivity guide below. If it did, let's start our Bee node with the --nat-addr configured. Copy bee start --nat-addr 86.98.94.9:7070 Checking our addresses endpoint again, we can now see that Bee has been able to successfully assign a public address! Congratulations, your Bee is now connected to the outside world! Copy [ \"/ip4/127.0.0.1/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/192.168.0.10/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip6/::1/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\", \"/ip4/86.98.94.9/tcp/7070/p2p/16Uiu2HAm8Hs91MzWuXfUyKrYaj3h8K8gzvRqzSK5gP9TNCwypkJB\" ] info If you are regularly connecting and disconnecting to a network, you may also want to use your router's firmware to configure the router to reserve and only assign the same local network IP from it's DHCP pool to your computer's MAC address. This will ensure that your Bee seamlessly connects when you rejoin the network! "},{"title":"Debugging Connectivity","type":1,"pageTitle":"Connectivity","url":"docs/installation/connectivity#debugging-connectivity","content":"The above guide navigates your NAT, but there are still a few hurdles to overcome. To make sure there is a clear path from your computer to the outside world, let's follow our Bee's journey from the inside out. Let's set up a Netcat listener on all interfaces on the computer we'd like to run Bee on as we have above. Copy nc -l 0.0.0.0 7070 Now, let's verify we're above to test this by checking the connection on our local machine. Copy nc -zv 127.0.0.1 7070 Copy nc -zv 127.0.0.1 7070 Connection to 127.0.0.1 port 7070 [tcp/*] succeeded! This should be a no brainer, the connection between localhost in not normally mediated. If there is a problem here, the problem is with some other software running on your operating system or your operating system itself. Try a different port, such as 7071 and turning off any unneccesary software. If this doesn't work, you may need to try a different operating system environment. Please get in touch and we'll try to help! If we were successful, let's move on to the next stage. info If you are not able to get access to some firewall settings, or otherwise debug incoming connectivity, don't worry! All is not lost. Bee can function just fine with just outgoing connections. However, if you can, it is worth the effort to allow incoming connections, as this benefits the whole of the swarm. Let's find out what our IP looks like to the internet. Copy curl icanhazip.com Copy 86.98.94.9 Now try to connect to your port using the global IP. Copy nc -zv 86.98.94.9 7070 If this is successful, our Bee node's path is clear! If not, we can try a few things to make sure there are no barriers stopping us from getting through. Check your computers firewall. Sometimes your computer is configured to prevent connections. If you are on a private network mediated by NAT, you can check if this is the problem by trying to connect from another device on your network using the local IP nc -zv 192.168.0.10 7070. Ubuntu uses UFW, MacOS can be configured using the Firewall tab in the Security & Privacy section of System Preferences. Windows uses Defender Firewall. For each of these firewalls, set a special rule to allow UDP and TCP traffic to pass through on port 7070. You may want to limit this traffic to the Bee application only. Check your ingress firewall. For a datacenter hired server, this configuration will often take place in somewhere in the web user interface. Refer to your server hosting provider's documentation to work out how to open ports to the open internet. Ensure that both TCP and UDP traffic are allowed. Similarly, if you are connecting from within a private network, you may find that the port is blocked by the router. Each router is different, so consult your router's firware documentation to make sure there are no firewalls in place blocking traffic on your Bee's designated p2p port. You may check this using Netcat by trying to connect using your computer's public IP, as above nc -zv 86.98.94.9 7070. Docker Docker adds another level of complexity. To debug docker connectivity issues, we may use netcat as above to check port connections are working as expected. Double check that you are exposing the right ports to your local network, either by using the command line flags or in your docker-compose.yaml. You should be able to successfully check the connection locally using eg. nc -zv localhost 7070 then follow instructions above to make sure your local network has the correct ports exposed to the internet. Something else entirely? Networking is a complex topic, but it keeps us all together. If you still can't connect to your Bee, get in touch via The Beehive and we'll do our best to get you connected. In the swarm, no Bee is left behind. "},{"title":"Quick Start","type":0,"sectionRef":"#","url":"docs/installation/quick-start","content":"","keywords":""},{"title":"Supported platforms","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#supported-platforms","content":"The Bee client will happily run on MacOS, Windows and various Linux flavors. "},{"title":"Quick Install (Stable)","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#quick-install-stable","content":"We provide a convenient installation script, which automatically detects your execution environment and installs the latest stable version of the Bee client on your computer. Simply run either one of the following commands in your Terminal... wget# Copy wget -q -O - https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | TAG=v0.3.1 bash curl# Copy curl -s https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | TAG=v0.3.1 bash "},{"title":"Run Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#run-bee","content":"Once you have installed Bee, you can test that it has been successfully installed by running. Copy bee version > 0.3.1 Now your Bee node is installed, fund you node with gBZZ, get your node started and join us in the swarm! üêù üêù üêù üêù üêù "},{"title":"Upgrading Bee","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#upgrading-bee","content":"To upgrade previous versions of Bee installed using the above method, simply re-run the installation command above. "},{"title":"Edge (Unstable)","type":1,"pageTitle":"Quick Start","url":"docs/installation/quick-start#edge-unstable","content":"To get a sneak preview of the latest features added to Bee, you may also install the Edge version, which tracks the master branch of the Github respository wget# Copy wget -q -O - https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | bash curl# Copy curl -s https://raw.githubusercontent.com/ethersphere/bee/master/install.sh | bash "}]